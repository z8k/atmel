//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR Atmel AVR C/EC++ Compiler V3.20A/W32            19/Aug/2004  16:18:27 /
// Copyright 1996-2004 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  Z:\qvcs\AVR318 Dallas 1-wire Communication             /
//                    Interface\Source Code\IAR\polled\OWIHighLevelFunctions /
//                    .c                                                     /
//    Command line =  --cpu=m32 -ms -o "Z:\qvcs\AVR318 Dallas 1-wire         /
//                    Communication Interface\Source                         /
//                    Code\IAR\polled\Debug\Obj\" -lC "Z:\qvcs\AVR318        /
//                    Dallas 1-wire Communication Interface\Source           /
//                    Code\IAR\polled\Debug\List\" -lA "Z:\qvcs\AVR318       /
//                    Dallas 1-wire Communication Interface\Source           /
//                    Code\IAR\polled\Debug\List\" --initializers_in_flash   /
//                    --root_variables -z2 --no_cse --no_inline              /
//                    --no_code_motion --no_cross_call --no_clustering       /
//                    --debug -DENABLE_BIT_DEFINITIONS -e -I "C:\Program     /
//                    Files\IAR Systems\Embedded Workbench 3.2\avr\INC\" -I  /
//                    "C:\Program Files\IAR Systems\Embedded Workbench       /
//                    3.2\avr\INC\CLIB\" --eeprom_size 1024 "Z:\qvcs\AVR318  /
//                    Dallas 1-wire Communication Interface\Source           /
//                    Code\IAR\polled\OWIHighLevelFunctions.c"               /
//    List file    =  Z:\qvcs\AVR318 Dallas 1-wire Communication             /
//                    Interface\Source Code\IAR\polled\Debug\List\OWIHighLev /
//                    elFunctions.s90                                        /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME OWIHighLevelFunctions

        RTMODEL "__64bit_doubles", "disabled"
        RTMODEL "__cpu", "3"
        RTMODEL "__cpu_name", "ATmega32"
        RTMODEL "__enhanced_core", "enabled"
        RTMODEL "__has_elpm", "false"
        RTMODEL "__memory_model", "2"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B3_L09
        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?EPILOGUE_B9_L09
        EXTERN ?PROLOGUE3_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?PROLOGUE9_L09
        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg

        PUBLIC OWI_MatchRom
        FUNCTION OWI_MatchRom,021203H
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC OWI_ReadRom
        FUNCTION OWI_ReadRom,021203H
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC OWI_ReceiveByte
        FUNCTION OWI_ReceiveByte,021203H
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC OWI_SearchRom
        FUNCTION OWI_SearchRom,021203H
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC OWI_SendByte
        FUNCTION OWI_SendByte,021203H
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBLIC OWI_SkipRom
        FUNCTION OWI_SkipRom,021203H
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
        PUBWEAK _A_ACSR
        PUBWEAK _A_ADC
        PUBWEAK _A_ADCSRA
        PUBWEAK _A_ADMUX
        PUBWEAK _A_ASSR
        PUBWEAK _A_DDRA
        PUBWEAK _A_DDRB
        PUBWEAK _A_DDRC
        PUBWEAK _A_DDRD
        PUBWEAK _A_EEAR
        PUBWEAK _A_EECR
        PUBWEAK _A_EEDR
        PUBWEAK _A_GICR
        PUBWEAK _A_GIFR
        PUBWEAK _A_ICR1
        PUBWEAK _A_MCUCR
        PUBWEAK _A_MCUCSR
        PUBWEAK _A_OCR0
        PUBWEAK _A_OCR1A
        PUBWEAK _A_OCR1B
        PUBWEAK _A_OCR2
        PUBWEAK _A_OSCCAL
        PUBWEAK _A_PINA
        PUBWEAK _A_PINB
        PUBWEAK _A_PINC
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTA
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTC
        PUBWEAK _A_PORTD
        PUBWEAK _A_SFIOR
        PUBWEAK _A_SP
        PUBWEAK _A_SPCR
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPMCR
        PUBWEAK _A_SPSR
        PUBWEAK _A_SREG
        PUBWEAK _A_TCCR0
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR2
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_TCNT2
        PUBWEAK _A_TIFR
        PUBWEAK _A_TIMSK
        PUBWEAK _A_TWAR
        PUBWEAK _A_TWBR
        PUBWEAK _A_TWCR
        PUBWEAK _A_TWDR
        PUBWEAK _A_TWSR
        PUBWEAK _A_UBRRH
        PUBWEAK _A_UBRRL
        PUBWEAK _A_UCSRA
        PUBWEAK _A_UCSRB
        PUBWEAK _A_UDR
        PUBWEAK _A_WDTCR
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        
        CFI Names cfiNames0
        CFI StackFrame CFA_Y Y DATA
        CFI StackFrame CFA_SP SP DATA
        CFI VirtualResource ?RetPad:1, ?RetHigh:8, ?RetLow:8, ?Ret:17
        CFI Resource R0:8, R1:8, R2:8, R3:8, R4:8, R5:8, R6:8, R7:8, R8:8, R9:8
        CFI Resource R10:8, R11:8, R12:8, R13:8, R14:8, R15:8, R16:8, R17:8
        CFI Resource R18:8, R19:8, R20:8, R21:8, R22:8, R23:8, R24:8, R25:8
        CFI Resource R26:8, R27:8, R28:8, R29:8, R30:8, R31:8
        CFI Resource ?RetHighByteMask:8, SP:16, SPH:8, SPL:8, Y:16
        CFI ResourceParts ?Ret ?RetHigh, ?RetLow, ?RetPad
        CFI ResourceParts SP SPH, SPL
        CFI ResourceParts Y R29, R28
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign 1
        CFI ReturnAddress ?Ret CODE
        CFI CFA_Y Y+0
        CFI CFA_SP SP+2
        CFI ?RetPad 0
        CFI ?RetHigh and(load(1, DATA, sub(CFA_SP, 1)), ?RetHighByteMask)
        CFI ?RetLow Frame(CFA_SP, 0)
        CFI ?Ret Concat
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI R8 SameValue
        CFI R9 SameValue
        CFI R10 SameValue
        CFI R11 SameValue
        CFI R12 SameValue
        CFI R13 SameValue
        CFI R14 SameValue
        CFI R15 SameValue
        CFI R16 Undefined
        CFI R17 Undefined
        CFI R18 Undefined
        CFI R19 Undefined
        CFI R20 Undefined
        CFI R21 Undefined
        CFI R22 Undefined
        CFI R23 Undefined
        CFI R24 SameValue
        CFI R25 SameValue
        CFI R26 SameValue
        CFI R27 SameValue
        CFI R28 Undefined
        CFI R29 Undefined
        CFI R30 Undefined
        CFI R31 Undefined
        CFI ?RetHighByteMask SameValue
        CFI SPH Undefined
        CFI SPL Undefined
        CFI EndCommon cfiCommon0
        
        EXTERN OWI_WriteBit1
        FUNCTION OWI_WriteBit1,0202H
        EXTERN OWI_WriteBit0
        FUNCTION OWI_WriteBit0,0202H
        EXTERN OWI_ReadBit
        FUNCTION OWI_ReadBit,0202H

// Z:\qvcs\AVR318 Dallas 1-wire Communication Interface\Source Code\IAR\polled\OWIHighLevelFunctions.c
//    1 // This file has been prepared for Doxygen automatic documentation generation.
//    2 /*! \file ********************************************************************
//    3 *
//    4 * Atmel Corporation
//    5 *
//    6 * \li File:               OWIHighLevelFunctions.c
//    7 * \li Compiler:           IAR EWAAVR 3.20a
//    8 * \li Support mail:       avr@atmel.com
//    9 *
//   10 * \li Supported devices:  All AVRs.
//   11 *
//   12 * \li Application Note:   AVR318 - Dallas 1-Wire(R) master.
//   13 *                         
//   14 *
//   15 * \li Description:        High level functions for transmission of full bytes
//   16 *                         on the 1-Wire(R) bus and implementations of ROM
//   17 *                         commands.
//   18 *
//   19 *                         $Revision: 1.6 $
//   20 *                         $Date: Thursday, August 19, 2004 09:02:02 UTC $
//   21 ****************************************************************************/
//   22 
//   23 #include <ioavr.h>
//   24 
//   25 #include "OWIHighLevelFunctions.h"
//   26 #include "OWIBitFunctions.h"
//   27 #include "OWIPolled.h"
//   28 
//   29 
//   30 /*! \brief  Sends one byte of data on the 1-Wire(R) bus(es).
//   31  *  
//   32  *  This function automates the task of sending a complete byte
//   33  *  of data on the 1-Wire bus(es).
//   34  *
//   35  *  \param  data    The data to send on the bus(es).
//   36  *  
//   37  *  \param  pins    A bitmask of the buses to send the data to.
//   38  */

        RSEG CODE:CODE:NOROOT(1)
//   39 void OWI_SendByte(unsigned char data, unsigned char pins)
OWI_SendByte:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function OWI_SendByte
//   40 {
        FUNCALL OWI_SendByte, OWI_WriteBit1
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL OWI_SendByte, OWI_WriteBit0
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	MOV	R26,R16
	MOV	R25,R17
//   41     unsigned char temp;
//   42     unsigned char i;
//   43     
//   44     // Do once for each bit
//   45     for (i = 0; i < 8; i++)
	LDI	R24,0
??OWI_SendByte_0:
	CPI	R24,8
	BRCC	??OWI_SendByte_1
//   46     {
//   47         // Determine if lsb is '0' or '1' and transmit corresponding
//   48         // waveform on the bus.
//   49         temp = data & 0x01;
	MOV	R16,R26
	ANDI	R16,0x01
	MOV	R27,R16
//   50         if (temp)
	TST	R27
	BREQ	??OWI_SendByte_2
//   51         {
//   52             OWI_WriteBit1(pins);
	MOV	R16,R25
	CALL	OWI_WriteBit1
	RJMP	??OWI_SendByte_3
//   53         }
//   54         else
//   55         {
//   56             OWI_WriteBit0(pins);
??OWI_SendByte_2:
	MOV	R16,R25
	CALL	OWI_WriteBit0
//   57         }
//   58         // Right shift the data to get next bit.
//   59         data >>= 1;
??OWI_SendByte_3:
	LSR	R26
//   60     }
	INC	R24
	RJMP	??OWI_SendByte_0
//   61 }
??OWI_SendByte_1:
	LDI	R30,4
	JMP	?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock0
//   62 
//   63 
//   64 /*!  \brief  Receives one byte of data from the 1-Wire(R) bus.
//   65  *
//   66  *  This function automates the task of receiving a complete byte 
//   67  *  of data from the 1-Wire bus.
//   68  *
//   69  *  \param  pin     A bitmask of the bus to read from.
//   70  *  
//   71  *  \return     The byte read from the bus.
//   72  */

        RSEG CODE:CODE:NOROOT(1)
//   73 unsigned char OWI_ReceiveByte(unsigned char pin)
OWI_ReceiveByte:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function OWI_ReceiveByte
//   74 {
        FUNCALL OWI_ReceiveByte, OWI_ReadBit
        LOCFRAME CSTACK, 3, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE3_L09
        CFI R26 Frame(CFA_Y, -1)
        CFI R25 Frame(CFA_Y, -2)
        CFI R24 Frame(CFA_Y, -3)
        CFI CFA_Y Y+3
	MOV	R26,R16
//   75     unsigned char data;
//   76     unsigned char i;
//   77 
//   78     // Clear the temporary input variable.
//   79     data = 0x00;
	LDI	R25,0
//   80     
//   81     // Do once for each bit
//   82     for (i = 0; i < 8; i++)
	LDI	R24,0
??OWI_ReceiveByte_0:
	CPI	R24,8
	BRCC	??OWI_ReceiveByte_1
//   83     {
//   84         // Shift temporary input variable right.
//   85         data >>= 1;
	LSR	R25
//   86         // Set the msb if a '1' value is read from the bus.
//   87         // Leave as it is ('0') else.
//   88         if (OWI_ReadBit(pin))
	MOV	R16,R26
	CALL	OWI_ReadBit
	TST	R16
	BREQ	??OWI_ReceiveByte_2
//   89         {
//   90             // Set msb
//   91             data |= 0x80;
	ORI	R25,0x80
//   92         }
//   93     }
??OWI_ReceiveByte_2:
	INC	R24
	RJMP	??OWI_ReceiveByte_0
//   94     return data;
??OWI_ReceiveByte_1:
	MOV	R16,R25
	LDI	R30,3
	JMP	?EPILOGUE_B3_L09
        CFI EndBlock cfiBlock1
//   95 }
//   96 
//   97 
//   98 /*! \brief   Sends the SKIP ROM command to the 1-Wire bus(es).
//   99  *
//  100  *  \param  pins    A bitmask of the buses to send the SKIP ROM command to.
//  101  */

        RSEG CODE:CODE:NOROOT(1)
//  102 void OWI_SkipRom(unsigned char pins)
OWI_SkipRom:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function OWI_SkipRom
//  103 {
        FUNCALL OWI_SkipRom, OWI_SendByte
        LOCFRAME CSTACK, 1, STACK
        LOCFRAME RSTACK, 2, STACK
	ST	-Y,R24
        CFI R24 Frame(CFA_Y, -1)
        CFI CFA_Y Y+1
	MOV	R24,R16
//  104     // Send the SKIP ROM command on the bus.
//  105     OWI_SendByte(OWI_ROM_SKIP, pins);
	MOV	R17,R24
	LDI	R16,204
	RCALL	OWI_SendByte
//  106 }
	LD	R24,Y+
        CFI R24 SameValue
        CFI CFA_Y Y+0
	RET
        CFI EndBlock cfiBlock2
//  107 
//  108 
//  109 /*! \brief  Sends the READ ROM command and reads back the ROM id.
//  110  *
//  111  *  \param  romValue    A pointer where the id will be placed.
//  112  *
//  113  *  \param  pin     A bitmask of the bus to read from.
//  114  */

        RSEG CODE:CODE:NOROOT(1)
//  115 void OWI_ReadRom(unsigned char * romValue, unsigned char pin)
OWI_ReadRom:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function OWI_ReadRom
//  116 {
        FUNCALL OWI_ReadRom, OWI_SendByte
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL OWI_ReadRom, OWI_ReceiveByte
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	MOVW	R27 : R26,R17 : R16
	MOV	R25,R18
//  117     unsigned char bytesLeft = 8;
	LDI	R24,8
//  118 
//  119     // Send the READ ROM command on the bus.
//  120     OWI_SendByte(OWI_ROM_READ, pin);
	MOV	R17,R25
	LDI	R16,51
	RCALL	OWI_SendByte
//  121     
//  122     // Do 8 times.
//  123     while (bytesLeft > 0)
??OWI_ReadRom_0:
	CPI	R24,1
	BRCS	??OWI_ReadRom_1
//  124     {
//  125         // Place the received data in memory.
//  126         *romValue++ = OWI_ReceiveByte(pin);
	MOV	R16,R25
	RCALL	OWI_ReceiveByte
	MOVW	R31 : R30,R27 : R26
	ST	Z,R16
	ADIW	R27 : R26,1
//  127         bytesLeft--;
	DEC	R24
	RJMP	??OWI_ReadRom_0
//  128     }
//  129 }
??OWI_ReadRom_1:
	LDI	R30,4
	JMP	?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock3
//  130 
//  131 
//  132 /*! \brief  Sends the MATCH ROM command and the ROM id to match against.
//  133  *
//  134  *  \param  romValue    A pointer to the ID to match against.
//  135  *
//  136  *  \param  pins    A bitmask of the buses to perform the MATCH ROM command on.
//  137  */

        RSEG CODE:CODE:NOROOT(1)
//  138 void OWI_MatchRom(unsigned char * romValue, unsigned char pins)
OWI_MatchRom:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function OWI_MatchRom
//  139 {
        FUNCALL OWI_MatchRom, OWI_SendByte
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL OWI_MatchRom, OWI_SendByte
        LOCFRAME CSTACK, 4, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE4_L09
        CFI R27 Frame(CFA_Y, -1)
        CFI R26 Frame(CFA_Y, -2)
        CFI R25 Frame(CFA_Y, -3)
        CFI R24 Frame(CFA_Y, -4)
        CFI CFA_Y Y+4
	MOVW	R27 : R26,R17 : R16
	MOV	R25,R18
//  140     unsigned char bytesLeft = 8;   
	LDI	R24,8
//  141     
//  142     // Send the MATCH ROM command.
//  143     OWI_SendByte(OWI_ROM_MATCH, pins);
	MOV	R17,R25
	LDI	R16,85
	RCALL	OWI_SendByte
//  144 
//  145     // Do once for each byte.
//  146     while (bytesLeft > 0)
??OWI_MatchRom_0:
	CPI	R24,1
	BRCS	??OWI_MatchRom_1
//  147     {
//  148         // Transmit 1 byte of the ID to match.
//  149         OWI_SendByte(*romValue++, pins);
	MOV	R17,R25
	MOVW	R31 : R30,R27 : R26
	LD	R16,Z
	RCALL	OWI_SendByte
	ADIW	R27 : R26,1
//  150         bytesLeft--;
	DEC	R24
	RJMP	??OWI_MatchRom_0
//  151     }
//  152 }
??OWI_MatchRom_1:
	LDI	R30,4
	JMP	?EPILOGUE_B4_L09
        CFI EndBlock cfiBlock4
//  153 
//  154 
//  155 /*! \brief  Sends the SEARCH ROM command and returns 1 id found on the 
//  156  *          1-Wire(R) bus.
//  157  *
//  158  *  \param  bitPattern      A pointer to an 8 byte char array where the 
//  159  *                          discovered identifier will be placed. When 
//  160  *                          searching for several slaves, a copy of the 
//  161  *                          last found identifier should be supplied in 
//  162  *                          the array, or the search will fail.
//  163  *
//  164  *  \param  lastDeviation   The bit position where the algorithm made a 
//  165  *                          choice the last time it was run. This argument 
//  166  *                          should be 0 when a search is initiated. Supplying 
//  167  *                          the return argument of this function when calling 
//  168  *                          repeatedly will go through the complete slave 
//  169  *                          search.
//  170  *
//  171  *  \param  pin             A bit-mask of the bus to perform a ROM search on.
//  172  *
//  173  *  \return The last bit position where there was a discrepancy between slave addresses the last time this function was run. Returns OWI_ROM_SEARCH_FAILED if an error was detected (e.g. a device was connected to the bus during the search), or OWI_ROM_SEARCH_FINISHED when there are no more devices to be discovered.
//  174  *
//  175  *  \note   See main.c for an example of how to utilize this function.
//  176  */

        RSEG CODE:CODE:NOROOT(1)
//  177 unsigned char OWI_SearchRom(unsigned char * bitPattern, unsigned char lastDeviation, unsigned char pin)
OWI_SearchRom:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function OWI_SearchRom
//  178 {
        FUNCALL OWI_SearchRom, OWI_SendByte
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL OWI_SearchRom, OWI_ReadBit
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL OWI_SearchRom, OWI_ReadBit
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL OWI_SearchRom, OWI_WriteBit1
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
        FUNCALL OWI_SearchRom, OWI_WriteBit0
        LOCFRAME CSTACK, 9, STACK
        LOCFRAME RSTACK, 2, STACK
	CALL	?PROLOGUE9_L09
        CFI R8 Frame(CFA_Y, -1)
        CFI R7 Frame(CFA_Y, -2)
        CFI R6 Frame(CFA_Y, -3)
        CFI R5 Frame(CFA_Y, -4)
        CFI R4 Frame(CFA_Y, -5)
        CFI R27 Frame(CFA_Y, -6)
        CFI R26 Frame(CFA_Y, -7)
        CFI R25 Frame(CFA_Y, -8)
        CFI R24 Frame(CFA_Y, -9)
        CFI CFA_Y Y+9
	REQUIRE	?Register_R4_is_cg_reg
	REQUIRE	?Register_R5_is_cg_reg
	REQUIRE	?Register_R6_is_cg_reg
	REQUIRE	?Register_R7_is_cg_reg
	REQUIRE	?Register_R8_is_cg_reg
	MOVW	R5 : R4,R17 : R16
	MOV	R7,R18
	MOV	R26,R19
//  179     unsigned char currentBit = 1;
	LDI	R25,1
//  180     unsigned char newDeviation = 0;
	LDI	R27,0
//  181     unsigned char bitMask = 0x01;
	LDI	R24,1
//  182     unsigned char bitA;
//  183     unsigned char bitB;
//  184 
//  185     // Send SEARCH ROM command on the bus.
//  186     OWI_SendByte(OWI_ROM_SEARCH, pin);
	MOV	R17,R26
	LDI	R16,240
	RCALL	OWI_SendByte
//  187     
//  188     // Walk through all 64 bits.
//  189     while (currentBit <= 64)
??OWI_SearchRom_0:
	CPI	R25,65
	BRCS	$+2+2
	RJMP	??OWI_SearchRom_1
//  190     {
//  191         // Read bit from bus twice.
//  192         bitA = OWI_ReadBit(pin);
	MOV	R16,R26
	CALL	OWI_ReadBit
	MOV	R6,R16
//  193         bitB = OWI_ReadBit(pin);
	MOV	R16,R26
	CALL	OWI_ReadBit
	MOV	R8,R16
//  194 
//  195         if (bitA && bitB)
	TST	R6
	BREQ	??OWI_SearchRom_2
	TST	R8
	BREQ	$+2+2
	RJMP	??OWI_SearchRom_3
//  196         {
//  197             // Both bits 1 (Error).
//  198             newDeviation = OWI_ROM_SEARCH_FAILED;
//  199             return;
//  200         }
//  201         else if (bitA ^ bitB)
??OWI_SearchRom_2:
	MOV	R16,R8
	EOR	R16,R6
	TST	R16
	BREQ	??OWI_SearchRom_4
//  202         {
//  203             // Bits A and B are different. All devices have the same bit here.
//  204             // Set the bit in bitPattern to this value.
//  205             if (bitA)
	TST	R6
	BREQ	??OWI_SearchRom_5
//  206             {
//  207                 (*bitPattern) |= bitMask;
	MOVW	R31 : R30,R5 : R4
	LD	R16,Z
	OR	R16,R24
	ST	Z,R16
	RJMP	??OWI_SearchRom_6
//  208             }
//  209             else
//  210             {
//  211                 (*bitPattern) &= ~bitMask;
??OWI_SearchRom_5:
	MOV	R16,R24
	COM	R16
	MOVW	R31 : R30,R5 : R4
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
	RJMP	??OWI_SearchRom_6
//  212             }
//  213         }
//  214         else // Both bits 0
//  215         {
//  216             // If this is where a choice was made the last time,
//  217             // a '1' bit is selected this time.
//  218             if (currentBit == lastDeviation)
??OWI_SearchRom_4:
	CP	R25,R7
	BRNE	??OWI_SearchRom_7
//  219             {
//  220                 (*bitPattern) |= bitMask;
	MOVW	R31 : R30,R5 : R4
	LD	R16,Z
	OR	R16,R24
	ST	Z,R16
	RJMP	??OWI_SearchRom_6
//  221             }
//  222             // For the rest of the id, '0' bits are selected when
//  223             // discrepancies occur.
//  224             else if (currentBit > lastDeviation)
??OWI_SearchRom_7:
	CP	R7,R25
	BRCC	??OWI_SearchRom_8
//  225             {
//  226                 (*bitPattern) &= ~bitMask;
	MOV	R16,R24
	COM	R16
	MOVW	R31 : R30,R5 : R4
	LD	R17,Z
	AND	R17,R16
	ST	Z,R17
//  227                 newDeviation = currentBit;
	MOV	R27,R25
	RJMP	??OWI_SearchRom_6
//  228             }
//  229             // If current bit in bit pattern = 0, then this is
//  230             // out new deviation.
//  231             else if ( !(*bitPattern & bitMask)) 
??OWI_SearchRom_8:
	MOVW	R31 : R30,R5 : R4
	LD	R16,Z
	AND	R16,R24
	TST	R16
	BRNE	??OWI_SearchRom_6
//  232             {
//  233                 newDeviation = currentBit;
	MOV	R27,R25
//  234             }
//  235             // IF the bit is already 1, do nothing.
//  236             else
//  237             {
//  238             
//  239             }
//  240         }
//  241                 
//  242         
//  243         // Send the selected bit to the bus.
//  244         if ((*bitPattern) & bitMask)
??OWI_SearchRom_6:
	MOVW	R31 : R30,R5 : R4
	LD	R16,Z
	AND	R16,R24
	TST	R16
	BREQ	??OWI_SearchRom_9
//  245         {
//  246             OWI_WriteBit1(pin);
	MOV	R16,R26
	CALL	OWI_WriteBit1
	RJMP	??OWI_SearchRom_10
//  247         }
//  248         else
//  249         {
//  250             OWI_WriteBit0(pin);
??OWI_SearchRom_9:
	MOV	R16,R26
	CALL	OWI_WriteBit0
//  251         }
//  252 
//  253         // Increment current bit.    
//  254         currentBit++;
??OWI_SearchRom_10:
	INC	R25
//  255 
//  256         // Adjust bitMask and bitPattern pointer.    
//  257         bitMask <<= 1;
	LSL	R24
//  258         if (!bitMask)
	TST	R24
	BREQ	$+2+2
	RJMP	??OWI_SearchRom_0
//  259         {
//  260             bitMask = 0x01;
	LDI	R24,1
//  261             bitPattern++;
	LDI	R16,1
	ADD	R4,R16
	LDI	R16,0
	ADC	R5,R16
	RJMP	??OWI_SearchRom_0
//  262         }
//  263     }
//  264     return newDeviation;
??OWI_SearchRom_1:
	MOV	R16,R27
??OWI_SearchRom_3:
	LDI	R30,9
	JMP	?EPILOGUE_B9_L09
        CFI EndBlock cfiBlock5
//  265 }

        ASEGN ABSOLUTE:DATA:ROOT,03eH
// union <unnamed> volatile __io _A_EEAR
_A_EEAR:
        DS 2

        ASEGN ABSOLUTE:DATA:ROOT,040H
// union <unnamed> volatile __io _A_UBRRH
_A_UBRRH:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,041H
// union <unnamed> volatile __io _A_WDTCR
_A_WDTCR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,042H
// union <unnamed> volatile __io _A_ASSR
_A_ASSR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,043H
// union <unnamed> volatile __io _A_OCR2
_A_OCR2:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,044H
// union <unnamed> volatile __io _A_TCNT2
_A_TCNT2:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,045H
// union <unnamed> volatile __io _A_TCCR2
_A_TCCR2:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,046H
// union <unnamed> volatile __io _A_ICR1
_A_ICR1:
        DS 2

        ASEGN ABSOLUTE:DATA:ROOT,048H
// union <unnamed> volatile __io _A_OCR1B
_A_OCR1B:
        DS 2

        ASEGN ABSOLUTE:DATA:ROOT,04aH
// union <unnamed> volatile __io _A_OCR1A
_A_OCR1A:
        DS 2

        ASEGN ABSOLUTE:DATA:ROOT,04cH
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS 2

        ASEGN ABSOLUTE:DATA:ROOT,04eH
// union <unnamed> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,04fH
// union <unnamed> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,050H
// union <unnamed> volatile __io _A_SFIOR
_A_SFIOR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,051H
// union <unnamed> volatile __io _A_OSCCAL
_A_OSCCAL:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,052H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,053H
// union <unnamed> volatile __io _A_TCCR0
_A_TCCR0:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,054H
// union <unnamed> volatile __io _A_MCUCSR
_A_MCUCSR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,055H
// union <unnamed> volatile __io _A_MCUCR
_A_MCUCR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,056H
// union <unnamed> volatile __io _A_TWCR
_A_TWCR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,057H
// union <unnamed> volatile __io _A_SPMCR
_A_SPMCR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,058H
// union <unnamed> volatile __io _A_TIFR
_A_TIFR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,059H
// union <unnamed> volatile __io _A_TIMSK
_A_TIMSK:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,05aH
// union <unnamed> volatile __io _A_GIFR
_A_GIFR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,05bH
// union <unnamed> volatile __io _A_GICR
_A_GICR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,05cH
// union <unnamed> volatile __io _A_OCR0
_A_OCR0:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,05dH
// union <unnamed> volatile __io _A_SP
_A_SP:
        DS 2

        ASEGN ABSOLUTE:DATA:ROOT,05fH
// union <unnamed> volatile __io _A_SREG
_A_SREG:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,020H
// union <unnamed> volatile __io _A_TWBR
_A_TWBR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,021H
// union <unnamed> volatile __io _A_TWSR
_A_TWSR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,022H
// union <unnamed> volatile __io _A_TWAR
_A_TWAR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,023H
// union <unnamed> volatile __io _A_TWDR
_A_TWDR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,024H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS 2

        ASEGN ABSOLUTE:DATA:ROOT,026H
// union <unnamed> volatile __io _A_ADCSRA
_A_ADCSRA:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,027H
// union <unnamed> volatile __io _A_ADMUX
_A_ADMUX:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,028H
// union <unnamed> volatile __io _A_ACSR
_A_ACSR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,029H
// union <unnamed> volatile __io _A_UBRRL
_A_UBRRL:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,02aH
// union <unnamed> volatile __io _A_UCSRB
_A_UCSRB:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,02bH
// union <unnamed> volatile __io _A_UCSRA
_A_UCSRA:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,02cH
// union <unnamed> volatile __io _A_UDR
_A_UDR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,02dH
// union <unnamed> volatile __io _A_SPCR
_A_SPCR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,02eH
// union <unnamed> volatile __io _A_SPSR
_A_SPSR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,02fH
// union <unnamed> volatile __io _A_SPDR
_A_SPDR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,030H
// union <unnamed> volatile __io _A_PIND
_A_PIND:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,031H
// union <unnamed> volatile __io _A_DDRD
_A_DDRD:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,032H
// union <unnamed> volatile __io _A_PORTD
_A_PORTD:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,033H
// union <unnamed> volatile __io _A_PINC
_A_PINC:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,034H
// union <unnamed> volatile __io _A_DDRC
_A_DDRC:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,035H
// union <unnamed> volatile __io _A_PORTC
_A_PORTC:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,036H
// union <unnamed> volatile __io _A_PINB
_A_PINB:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,037H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,039H
// union <unnamed> volatile __io _A_PINA
_A_PINA:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,03aH
// union <unnamed> volatile __io _A_DDRA
_A_DDRA:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,03bH
// union <unnamed> volatile __io _A_PORTA
_A_PORTA:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,03cH
// union <unnamed> volatile __io _A_EECR
_A_EECR:
        DS 1

        ASEGN ABSOLUTE:DATA:ROOT,03dH
// union <unnamed> volatile __io _A_EEDR
_A_EEDR:
        DS 1

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
//  266 
// 
//  64 bytes in segment ABSOLUTE
// 374 bytes in segment CODE
// 
// 374 bytes of CODE memory
//   0 bytes of DATA memory (+ 64 bytes shared)
//
//Errors: none
//Warnings: none
