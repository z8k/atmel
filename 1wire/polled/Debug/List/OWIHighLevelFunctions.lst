##############################################################################
#                                                                            #
# IAR Atmel AVR C/EC++ Compiler V3.20A/W32             19/Aug/2004  16:18:27 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  Z:\qvcs\AVR318 Dallas 1-wire Communication              #
#                    Interface\Source Code\IAR\polled\OWIHighLevelFunctions. #
#                    c                                                       #
#    Command line =  --cpu=m32 -ms -o "Z:\qvcs\AVR318 Dallas 1-wire          #
#                    Communication Interface\Source                          #
#                    Code\IAR\polled\Debug\Obj\" -lC "Z:\qvcs\AVR318 Dallas  #
#                    1-wire Communication Interface\Source                   #
#                    Code\IAR\polled\Debug\List\" -lA "Z:\qvcs\AVR318        #
#                    Dallas 1-wire Communication Interface\Source            #
#                    Code\IAR\polled\Debug\List\" --initializers_in_flash    #
#                    --root_variables -z2 --no_cse --no_inline               #
#                    --no_code_motion --no_cross_call --no_clustering        #
#                    --debug -DENABLE_BIT_DEFINITIONS -e -I "C:\Program      #
#                    Files\IAR Systems\Embedded Workbench 3.2\avr\INC\" -I   #
#                    "C:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\CLIB\" --eeprom_size 1024 "Z:\qvcs\AVR318   #
#                    Dallas 1-wire Communication Interface\Source            #
#                    Code\IAR\polled\OWIHighLevelFunctions.c"                #
#    List file    =  Z:\qvcs\AVR318 Dallas 1-wire Communication              #
#                    Interface\Source Code\IAR\polled\Debug\List\OWIHighLeve #
#                    lFunctions.lst                                          #
#    Object file  =  Z:\qvcs\AVR318 Dallas 1-wire Communication              #
#                    Interface\Source Code\IAR\polled\Debug\Obj\OWIHighLevel #
#                    Functions.r90                                           #
#                                                                            #
#                                                                            #
##############################################################################

Z:\qvcs\AVR318 Dallas 1-wire Communication Interface\Source Code\IAR\polled\OWIHighLevelFunctions.c
      1          // This file has been prepared for Doxygen automatic documentation generation.
      2          /*! \file ********************************************************************
      3          *
      4          * Atmel Corporation
      5          *
      6          * \li File:               OWIHighLevelFunctions.c
      7          * \li Compiler:           IAR EWAAVR 3.20a
      8          * \li Support mail:       avr@atmel.com
      9          *
     10          * \li Supported devices:  All AVRs.
     11          *
     12          * \li Application Note:   AVR318 - Dallas 1-Wire(R) master.
     13          *                         
     14          *
     15          * \li Description:        High level functions for transmission of full bytes
     16          *                         on the 1-Wire(R) bus and implementations of ROM
     17          *                         commands.
     18          *
     19          *                         $Revision: 1.6 $
     20          *                         $Date: Thursday, August 19, 2004 09:02:02 UTC $
     21          ****************************************************************************/
     22          
     23          #include <ioavr.h>
     24          
     25          #include "OWIHighLevelFunctions.h"
     26          #include "OWIBitFunctions.h"
     27          #include "OWIPolled.h"
     28          
     29          
     30          /*! \brief  Sends one byte of data on the 1-Wire(R) bus(es).
     31           *  
     32           *  This function automates the task of sending a complete byte
     33           *  of data on the 1-Wire bus(es).
     34           *
     35           *  \param  data    The data to send on the bus(es).
     36           *  
     37           *  \param  pins    A bitmask of the buses to send the data to.
     38           */

   \                                 In segment CODE, align 2, keep-with-next
     39          void OWI_SendByte(unsigned char data, unsigned char pins)
   \                     OWI_SendByte:
     40          {
   \   00000000   ........                   CALL    ?PROLOGUE4_L09
   \   00000004   2FA0                       MOV     R26,R16
   \   00000006   2F91                       MOV     R25,R17
     41              unsigned char temp;
     42              unsigned char i;
     43              
     44              // Do once for each bit
     45              for (i = 0; i < 8; i++)
   \   00000008   E080                       LDI     R24,0
   \                     ??OWI_SendByte_0:
   \   0000000A   3088                       CPI     R24,8
   \   0000000C   F478                       BRCC    ??OWI_SendByte_1
     46              {
     47                  // Determine if lsb is '0' or '1' and transmit corresponding
     48                  // waveform on the bus.
     49                  temp = data & 0x01;
   \   0000000E   2F0A                       MOV     R16,R26
   \   00000010   7001                       ANDI    R16,0x01
   \   00000012   2FB0                       MOV     R27,R16
     50                  if (temp)
   \   00000014   23BB                       TST     R27
   \   00000016   F021                       BREQ    ??OWI_SendByte_2
     51                  {
     52                      OWI_WriteBit1(pins);
   \   00000018   2F09                       MOV     R16,R25
   \   0000001A   ........                   CALL    OWI_WriteBit1
   \   0000001E   C003                       RJMP    ??OWI_SendByte_3
     53                  }
     54                  else
     55                  {
     56                      OWI_WriteBit0(pins);
   \                     ??OWI_SendByte_2:
   \   00000020   2F09                       MOV     R16,R25
   \   00000022   ........                   CALL    OWI_WriteBit0
     57                  }
     58                  // Right shift the data to get next bit.
     59                  data >>= 1;
   \                     ??OWI_SendByte_3:
   \   00000026   95A6                       LSR     R26
     60              }
   \   00000028   9583                       INC     R24
   \   0000002A   CFEF                       RJMP    ??OWI_SendByte_0
     61          }
   \                     ??OWI_SendByte_1:
   \   0000002C   E0E4                       LDI     R30,4
   \   0000002E   ........                   JMP     ?EPILOGUE_B4_L09
     62          
     63          
     64          /*!  \brief  Receives one byte of data from the 1-Wire(R) bus.
     65           *
     66           *  This function automates the task of receiving a complete byte 
     67           *  of data from the 1-Wire bus.
     68           *
     69           *  \param  pin     A bitmask of the bus to read from.
     70           *  
     71           *  \return     The byte read from the bus.
     72           */

   \                                 In segment CODE, align 2, keep-with-next
     73          unsigned char OWI_ReceiveByte(unsigned char pin)
   \                     OWI_ReceiveByte:
     74          {
   \   00000000   ........                   CALL    ?PROLOGUE3_L09
   \   00000004   2FA0                       MOV     R26,R16
     75              unsigned char data;
     76              unsigned char i;
     77          
     78              // Clear the temporary input variable.
     79              data = 0x00;
   \   00000006   E090                       LDI     R25,0
     80              
     81              // Do once for each bit
     82              for (i = 0; i < 8; i++)
   \   00000008   E080                       LDI     R24,0
   \                     ??OWI_ReceiveByte_0:
   \   0000000A   3088                       CPI     R24,8
   \   0000000C   F448                       BRCC    ??OWI_ReceiveByte_1
     83              {
     84                  // Shift temporary input variable right.
     85                  data >>= 1;
   \   0000000E   9596                       LSR     R25
     86                  // Set the msb if a '1' value is read from the bus.
     87                  // Leave as it is ('0') else.
     88                  if (OWI_ReadBit(pin))
   \   00000010   2F0A                       MOV     R16,R26
   \   00000012   ........                   CALL    OWI_ReadBit
   \   00000016   2300                       TST     R16
   \   00000018   F009                       BREQ    ??OWI_ReceiveByte_2
     89                  {
     90                      // Set msb
     91                      data |= 0x80;
   \   0000001A   6890                       ORI     R25,0x80
     92                  }
     93              }
   \                     ??OWI_ReceiveByte_2:
   \   0000001C   9583                       INC     R24
   \   0000001E   CFF5                       RJMP    ??OWI_ReceiveByte_0
     94              return data;
   \                     ??OWI_ReceiveByte_1:
   \   00000020   2F09                       MOV     R16,R25
   \   00000022   E0E3                       LDI     R30,3
   \   00000024   ........                   JMP     ?EPILOGUE_B3_L09
     95          }
     96          
     97          
     98          /*! \brief   Sends the SKIP ROM command to the 1-Wire bus(es).
     99           *
    100           *  \param  pins    A bitmask of the buses to send the SKIP ROM command to.
    101           */

   \                                 In segment CODE, align 2, keep-with-next
    102          void OWI_SkipRom(unsigned char pins)
   \                     OWI_SkipRom:
    103          {
   \   00000000   938A                       ST      -Y,R24
   \   00000002   2F80                       MOV     R24,R16
    104              // Send the SKIP ROM command on the bus.
    105              OWI_SendByte(OWI_ROM_SKIP, pins);
   \   00000004   2F18                       MOV     R17,R24
   \   00000006   EC0C                       LDI     R16,204
   \   00000008   ....                       RCALL   OWI_SendByte
    106          }
   \   0000000A   9189                       LD      R24,Y+
   \   0000000C   9508                       RET
    107          
    108          
    109          /*! \brief  Sends the READ ROM command and reads back the ROM id.
    110           *
    111           *  \param  romValue    A pointer where the id will be placed.
    112           *
    113           *  \param  pin     A bitmask of the bus to read from.
    114           */

   \                                 In segment CODE, align 2, keep-with-next
    115          void OWI_ReadRom(unsigned char * romValue, unsigned char pin)
   \                     OWI_ReadRom:
    116          {
   \   00000000   ........                   CALL    ?PROLOGUE4_L09
   \   00000004   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000006   2F92                       MOV     R25,R18
    117              unsigned char bytesLeft = 8;
   \   00000008   E088                       LDI     R24,8
    118          
    119              // Send the READ ROM command on the bus.
    120              OWI_SendByte(OWI_ROM_READ, pin);
   \   0000000A   2F19                       MOV     R17,R25
   \   0000000C   E303                       LDI     R16,51
   \   0000000E   ....                       RCALL   OWI_SendByte
    121              
    122              // Do 8 times.
    123              while (bytesLeft > 0)
   \                     ??OWI_ReadRom_0:
   \   00000010   3081                       CPI     R24,1
   \   00000012   F038                       BRCS    ??OWI_ReadRom_1
    124              {
    125                  // Place the received data in memory.
    126                  *romValue++ = OWI_ReceiveByte(pin);
   \   00000014   2F09                       MOV     R16,R25
   \   00000016   ....                       RCALL   OWI_ReceiveByte
   \   00000018   01FD                       MOVW    R31 : R30,R27 : R26
   \   0000001A   8300                       ST      Z,R16
   \   0000001C   9611                       ADIW    R27 : R26,1
    127                  bytesLeft--;
   \   0000001E   958A                       DEC     R24
   \   00000020   CFF7                       RJMP    ??OWI_ReadRom_0
    128              }
    129          }
   \                     ??OWI_ReadRom_1:
   \   00000022   E0E4                       LDI     R30,4
   \   00000024   ........                   JMP     ?EPILOGUE_B4_L09
    130          
    131          
    132          /*! \brief  Sends the MATCH ROM command and the ROM id to match against.
    133           *
    134           *  \param  romValue    A pointer to the ID to match against.
    135           *
    136           *  \param  pins    A bitmask of the buses to perform the MATCH ROM command on.
    137           */

   \                                 In segment CODE, align 2, keep-with-next
    138          void OWI_MatchRom(unsigned char * romValue, unsigned char pins)
   \                     OWI_MatchRom:
    139          {
   \   00000000   ........                   CALL    ?PROLOGUE4_L09
   \   00000004   01D8                       MOVW    R27 : R26,R17 : R16
   \   00000006   2F92                       MOV     R25,R18
    140              unsigned char bytesLeft = 8;   
   \   00000008   E088                       LDI     R24,8
    141              
    142              // Send the MATCH ROM command.
    143              OWI_SendByte(OWI_ROM_MATCH, pins);
   \   0000000A   2F19                       MOV     R17,R25
   \   0000000C   E505                       LDI     R16,85
   \   0000000E   ....                       RCALL   OWI_SendByte
    144          
    145              // Do once for each byte.
    146              while (bytesLeft > 0)
   \                     ??OWI_MatchRom_0:
   \   00000010   3081                       CPI     R24,1
   \   00000012   F038                       BRCS    ??OWI_MatchRom_1
    147              {
    148                  // Transmit 1 byte of the ID to match.
    149                  OWI_SendByte(*romValue++, pins);
   \   00000014   2F19                       MOV     R17,R25
   \   00000016   01FD                       MOVW    R31 : R30,R27 : R26
   \   00000018   8100                       LD      R16,Z
   \   0000001A   ....                       RCALL   OWI_SendByte
   \   0000001C   9611                       ADIW    R27 : R26,1
    150                  bytesLeft--;
   \   0000001E   958A                       DEC     R24
   \   00000020   CFF7                       RJMP    ??OWI_MatchRom_0
    151              }
    152          }
   \                     ??OWI_MatchRom_1:
   \   00000022   E0E4                       LDI     R30,4
   \   00000024   ........                   JMP     ?EPILOGUE_B4_L09
    153          
    154          
    155          /*! \brief  Sends the SEARCH ROM command and returns 1 id found on the 
    156           *          1-Wire(R) bus.
    157           *
    158           *  \param  bitPattern      A pointer to an 8 byte char array where the 
    159           *                          discovered identifier will be placed. When 
    160           *                          searching for several slaves, a copy of the 
    161           *                          last found identifier should be supplied in 
    162           *                          the array, or the search will fail.
    163           *
    164           *  \param  lastDeviation   The bit position where the algorithm made a 
    165           *                          choice the last time it was run. This argument 
    166           *                          should be 0 when a search is initiated. Supplying 
    167           *                          the return argument of this function when calling 
    168           *                          repeatedly will go through the complete slave 
    169           *                          search.
    170           *
    171           *  \param  pin             A bit-mask of the bus to perform a ROM search on.
    172           *
    173           *  \return The last bit position where there was a discrepancy between slave addresses the last time this function was run. Returns OWI_ROM_SEARCH_FAILED if an error was detected (e.g. a device was connected to the bus during the search), or OWI_ROM_SEARCH_FINISHED when there are no more devices to be discovered.
    174           *
    175           *  \note   See main.c for an example of how to utilize this function.
    176           */

   \                                 In segment CODE, align 2, keep-with-next
    177          unsigned char OWI_SearchRom(unsigned char * bitPattern, unsigned char lastDeviation, unsigned char pin)
   \                     OWI_SearchRom:
    178          {
   \   00000000   ........                   CALL    ?PROLOGUE9_L09
   \   00000004                              REQUIRE ?Register_R4_is_cg_reg
   \   00000004                              REQUIRE ?Register_R5_is_cg_reg
   \   00000004                              REQUIRE ?Register_R6_is_cg_reg
   \   00000004                              REQUIRE ?Register_R7_is_cg_reg
   \   00000004                              REQUIRE ?Register_R8_is_cg_reg
   \   00000004   0128                       MOVW    R5 : R4,R17 : R16
   \   00000006   2E72                       MOV     R7,R18
   \   00000008   2FA3                       MOV     R26,R19
    179              unsigned char currentBit = 1;
   \   0000000A   E091                       LDI     R25,1
    180              unsigned char newDeviation = 0;
   \   0000000C   E0B0                       LDI     R27,0
    181              unsigned char bitMask = 0x01;
   \   0000000E   E081                       LDI     R24,1
    182              unsigned char bitA;
    183              unsigned char bitB;
    184          
    185              // Send SEARCH ROM command on the bus.
    186              OWI_SendByte(OWI_ROM_SEARCH, pin);
   \   00000010   2F1A                       MOV     R17,R26
   \   00000012   EF00                       LDI     R16,240
   \   00000014   ....                       RCALL   OWI_SendByte
    187              
    188              // Walk through all 64 bits.
    189              while (currentBit <= 64)
   \                     ??OWI_SearchRom_0:
   \   00000016   3491                       CPI     R25,65
   \   00000018   F008                       BRCS    $+2+2
   \   0000001A   C04D                       RJMP    ??OWI_SearchRom_1
    190              {
    191                  // Read bit from bus twice.
    192                  bitA = OWI_ReadBit(pin);
   \   0000001C   2F0A                       MOV     R16,R26
   \   0000001E   ........                   CALL    OWI_ReadBit
   \   00000022   2E60                       MOV     R6,R16
    193                  bitB = OWI_ReadBit(pin);
   \   00000024   2F0A                       MOV     R16,R26
   \   00000026   ........                   CALL    OWI_ReadBit
   \   0000002A   2E80                       MOV     R8,R16
    194          
    195                  if (bitA && bitB)
   \   0000002C   2066                       TST     R6
   \   0000002E   F019                       BREQ    ??OWI_SearchRom_2
   \   00000030   2088                       TST     R8
   \   00000032   F009                       BREQ    $+2+2
   \   00000034   C041                       RJMP    ??OWI_SearchRom_3
    196                  {
    197                      // Both bits 1 (Error).
    198                      newDeviation = OWI_ROM_SEARCH_FAILED;
    199                      return;
    200                  }
    201                  else if (bitA ^ bitB)
   \                     ??OWI_SearchRom_2:
   \   00000036   2D08                       MOV     R16,R8
   \   00000038   2506                       EOR     R16,R6
   \   0000003A   2300                       TST     R16
   \   0000003C   F071                       BREQ    ??OWI_SearchRom_4
    202                  {
    203                      // Bits A and B are different. All devices have the same bit here.
    204                      // Set the bit in bitPattern to this value.
    205                      if (bitA)
   \   0000003E   2066                       TST     R6
   \   00000040   F029                       BREQ    ??OWI_SearchRom_5
    206                      {
    207                          (*bitPattern) |= bitMask;
   \   00000042   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000044   8100                       LD      R16,Z
   \   00000046   2B08                       OR      R16,R24
   \   00000048   8300                       ST      Z,R16
   \   0000004A   C01E                       RJMP    ??OWI_SearchRom_6
    208                      }
    209                      else
    210                      {
    211                          (*bitPattern) &= ~bitMask;
   \                     ??OWI_SearchRom_5:
   \   0000004C   2F08                       MOV     R16,R24
   \   0000004E   9500                       COM     R16
   \   00000050   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000052   8110                       LD      R17,Z
   \   00000054   2310                       AND     R17,R16
   \   00000056   8310                       ST      Z,R17
   \   00000058   C017                       RJMP    ??OWI_SearchRom_6
    212                      }
    213                  }
    214                  else // Both bits 0
    215                  {
    216                      // If this is where a choice was made the last time,
    217                      // a '1' bit is selected this time.
    218                      if (currentBit == lastDeviation)
   \                     ??OWI_SearchRom_4:
   \   0000005A   1597                       CP      R25,R7
   \   0000005C   F429                       BRNE    ??OWI_SearchRom_7
    219                      {
    220                          (*bitPattern) |= bitMask;
   \   0000005E   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000060   8100                       LD      R16,Z
   \   00000062   2B08                       OR      R16,R24
   \   00000064   8300                       ST      Z,R16
   \   00000066   C010                       RJMP    ??OWI_SearchRom_6
    221                      }
    222                      // For the rest of the id, '0' bits are selected when
    223                      // discrepancies occur.
    224                      else if (currentBit > lastDeviation)
   \                     ??OWI_SearchRom_7:
   \   00000068   1679                       CP      R7,R25
   \   0000006A   F440                       BRCC    ??OWI_SearchRom_8
    225                      {
    226                          (*bitPattern) &= ~bitMask;
   \   0000006C   2F08                       MOV     R16,R24
   \   0000006E   9500                       COM     R16
   \   00000070   01F2                       MOVW    R31 : R30,R5 : R4
   \   00000072   8110                       LD      R17,Z
   \   00000074   2310                       AND     R17,R16
   \   00000076   8310                       ST      Z,R17
    227                          newDeviation = currentBit;
   \   00000078   2FB9                       MOV     R27,R25
   \   0000007A   C006                       RJMP    ??OWI_SearchRom_6
    228                      }
    229                      // If current bit in bit pattern = 0, then this is
    230                      // out new deviation.
    231                      else if ( !(*bitPattern & bitMask)) 
   \                     ??OWI_SearchRom_8:
   \   0000007C   01F2                       MOVW    R31 : R30,R5 : R4
   \   0000007E   8100                       LD      R16,Z
   \   00000080   2308                       AND     R16,R24
   \   00000082   2300                       TST     R16
   \   00000084   F409                       BRNE    ??OWI_SearchRom_6
    232                      {
    233                          newDeviation = currentBit;
   \   00000086   2FB9                       MOV     R27,R25
    234                      }
    235                      // IF the bit is already 1, do nothing.
    236                      else
    237                      {
    238                      
    239                      }
    240                  }
    241                          
    242                  
    243                  // Send the selected bit to the bus.
    244                  if ((*bitPattern) & bitMask)
   \                     ??OWI_SearchRom_6:
   \   00000088   01F2                       MOVW    R31 : R30,R5 : R4
   \   0000008A   8100                       LD      R16,Z
   \   0000008C   2308                       AND     R16,R24
   \   0000008E   2300                       TST     R16
   \   00000090   F021                       BREQ    ??OWI_SearchRom_9
    245                  {
    246                      OWI_WriteBit1(pin);
   \   00000092   2F0A                       MOV     R16,R26
   \   00000094   ........                   CALL    OWI_WriteBit1
   \   00000098   C003                       RJMP    ??OWI_SearchRom_10
    247                  }
    248                  else
    249                  {
    250                      OWI_WriteBit0(pin);
   \                     ??OWI_SearchRom_9:
   \   0000009A   2F0A                       MOV     R16,R26
   \   0000009C   ........                   CALL    OWI_WriteBit0
    251                  }
    252          
    253                  // Increment current bit.    
    254                  currentBit++;
   \                     ??OWI_SearchRom_10:
   \   000000A0   9593                       INC     R25
    255          
    256                  // Adjust bitMask and bitPattern pointer.    
    257                  bitMask <<= 1;
   \   000000A2   0F88                       LSL     R24
    258                  if (!bitMask)
   \   000000A4   2388                       TST     R24
   \   000000A6   F009                       BREQ    $+2+2
   \   000000A8   CFB6                       RJMP    ??OWI_SearchRom_0
    259                  {
    260                      bitMask = 0x01;
   \   000000AA   E081                       LDI     R24,1
    261                      bitPattern++;
   \   000000AC   E001                       LDI     R16,1
   \   000000AE   0E40                       ADD     R4,R16
   \   000000B0   E000                       LDI     R16,0
   \   000000B2   1E50                       ADC     R5,R16
   \   000000B4   CFB0                       RJMP    ??OWI_SearchRom_0
    262                  }
    263              }
    264              return newDeviation;
   \                     ??OWI_SearchRom_1:
   \   000000B6   2F0B                       MOV     R16,R27
   \                     ??OWI_SearchRom_3:
   \   000000B8   E0E9                       LDI     R30,9
   \   000000BA   ........                   JMP     ?EPILOGUE_B9_L09
    265          }

   \                                 In segment ABSOLUTE, at 0x3e, root
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                              DS 2

   \                                 In segment ABSOLUTE, at 0x40, root
   \   union <unnamed> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x41, root
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x42, root
   \   union <unnamed> volatile __io _A_ASSR
   \                     _A_ASSR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x43, root
   \   union <unnamed> volatile __io _A_OCR2
   \                     _A_OCR2:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x44, root
   \   union <unnamed> volatile __io _A_TCNT2
   \                     _A_TCNT2:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x45, root
   \   union <unnamed> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x46, root
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                              DS 2

   \                                 In segment ABSOLUTE, at 0x48, root
   \   union <unnamed> volatile __io _A_OCR1B
   \                     _A_OCR1B:
   \   00000000                              DS 2

   \                                 In segment ABSOLUTE, at 0x4a, root
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                              DS 2

   \                                 In segment ABSOLUTE, at 0x4c, root
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                              DS 2

   \                                 In segment ABSOLUTE, at 0x4e, root
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x4f, root
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x50, root
   \   union <unnamed> volatile __io _A_SFIOR
   \                     _A_SFIOR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x51, root
   \   union <unnamed> volatile __io _A_OSCCAL
   \                     _A_OSCCAL:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x52, root
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x53, root
   \   union <unnamed> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x54, root
   \   union <unnamed> volatile __io _A_MCUCSR
   \                     _A_MCUCSR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x55, root
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x56, root
   \   union <unnamed> volatile __io _A_TWCR
   \                     _A_TWCR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x57, root
   \   union <unnamed> volatile __io _A_SPMCR
   \                     _A_SPMCR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x58, root
   \   union <unnamed> volatile __io _A_TIFR
   \                     _A_TIFR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x59, root
   \   union <unnamed> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x5a, root
   \   union <unnamed> volatile __io _A_GIFR
   \                     _A_GIFR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x5b, root
   \   union <unnamed> volatile __io _A_GICR
   \                     _A_GICR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x5c, root
   \   union <unnamed> volatile __io _A_OCR0
   \                     _A_OCR0:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x5d, root
   \   union <unnamed> volatile __io _A_SP
   \                     _A_SP:
   \   00000000                              DS 2

   \                                 In segment ABSOLUTE, at 0x5f, root
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x20, root
   \   union <unnamed> volatile __io _A_TWBR
   \                     _A_TWBR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x21, root
   \   union <unnamed> volatile __io _A_TWSR
   \                     _A_TWSR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x22, root
   \   union <unnamed> volatile __io _A_TWAR
   \                     _A_TWAR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x23, root
   \   union <unnamed> volatile __io _A_TWDR
   \                     _A_TWDR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x24, root
   \   union <unnamed> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                              DS 2

   \                                 In segment ABSOLUTE, at 0x26, root
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x27, root
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x28, root
   \   union <unnamed> volatile __io _A_ACSR
   \                     _A_ACSR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x29, root
   \   union <unnamed> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2a, root
   \   union <unnamed> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2b, root
   \   union <unnamed> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2c, root
   \   union <unnamed> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2d, root
   \   union <unnamed> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2e, root
   \   union <unnamed> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x2f, root
   \   union <unnamed> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x30, root
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x31, root
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x32, root
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x33, root
   \   union <unnamed> volatile __io _A_PINC
   \                     _A_PINC:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x34, root
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x35, root
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x36, root
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x37, root
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x38, root
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x39, root
   \   union <unnamed> volatile __io _A_PINA
   \                     _A_PINA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3a, root
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3b, root
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3c, root
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                              DS 1

   \                                 In segment ABSOLUTE, at 0x3d, root
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                              DS 1
    266          

   Maximum stack usage in bytes:

     Function             CSTACK RSTACK
     --------             ------ ------
     OWI_MatchRom             4      2
       -> OWI_SendByte        4      2
       -> OWI_SendByte        4      2
     OWI_ReadRom              4      2
       -> OWI_SendByte        4      2
       -> OWI_ReceiveByte     4      2
     OWI_ReceiveByte          3      2
       -> OWI_ReadBit         3      2
     OWI_SearchRom            9      2
       -> OWI_SendByte        9      2
       -> OWI_ReadBit         9      2
       -> OWI_ReadBit         9      2
       -> OWI_WriteBit1       9      2
       -> OWI_WriteBit0       9      2
     OWI_SendByte             4      2
       -> OWI_WriteBit1       4      2
       -> OWI_WriteBit0       4      2
     OWI_SkipRom              1      2
       -> OWI_SendByte        1      2


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     OWI_SendByte      50
     OWI_ReceiveByte   40
     OWI_SkipRom       14
     OWI_ReadRom       40
     OWI_MatchRom      40
     OWI_SearchRom    190
     _A_EEAR            2
     _A_UBRRH           1
     _A_WDTCR           1
     _A_ASSR            1
     _A_OCR2            1
     _A_TCNT2           1
     _A_TCCR2           1
     _A_ICR1            2
     _A_OCR1B           2
     _A_OCR1A           2
     _A_TCNT1           2
     _A_TCCR1B          1
     _A_TCCR1A          1
     _A_SFIOR           1
     _A_OSCCAL          1
     _A_TCNT0           1
     _A_TCCR0           1
     _A_MCUCSR          1
     _A_MCUCR           1
     _A_TWCR            1
     _A_SPMCR           1
     _A_TIFR            1
     _A_TIMSK           1
     _A_GIFR            1
     _A_GICR            1
     _A_OCR0            1
     _A_SP              2
     _A_SREG            1
     _A_TWBR            1
     _A_TWSR            1
     _A_TWAR            1
     _A_TWDR            1
     _A_ADC             2
     _A_ADCSRA          1
     _A_ADMUX           1
     _A_ACSR            1
     _A_UBRRL           1
     _A_UCSRB           1
     _A_UCSRA           1
     _A_UDR             1
     _A_SPCR            1
     _A_SPSR            1
     _A_SPDR            1
     _A_PIND            1
     _A_DDRD            1
     _A_PORTD           1
     _A_PINC            1
     _A_DDRC            1
     _A_PORTC           1
     _A_PINB            1
     _A_DDRB            1
     _A_PORTB           1
     _A_PINA            1
     _A_DDRA            1
     _A_PORTA           1
     _A_EECR            1
     _A_EEDR            1

 
  64 bytes in segment ABSOLUTE
 374 bytes in segment CODE
 
 374 bytes of CODE memory
   0 bytes of DATA memory (+ 64 bytes shared)

Errors: none
Warnings: none
